<!DOCTYPE html>
<html lang="en" class="keep-it-100">
<head>





    <link rel="stylesheet" type="text/css" href="/html/css/bulma.min.css" >
    <link rel="stylesheet" type="text/css" href="/html/css/all.min.css" >

    
    <script type="text/javascript" src="/html/js/vue.js"></script>


    <link  href="/html/css/cropper.css" rel="stylesheet">
    <script src="/html/js/cropper.js"></script>


    <style>

        html,body,#app {
          height: 100%;
          margin: 0;
        }

        #app {
          display: flex;
          flex-direction: column;
        }

        header {

          text-align: center;
        }

        main {
          flex: 1;
          display: flex;
          min-height: 0;
        }

        nav {

          width: 20%;
          overflow: auto;
          padding: 1em;
          
        }

        article {
          width: 80%;
          overflow: auto;
          padding: 1em;
        }


        details, .filter-holders {
            border: 1px solid #aaa;
            border-radius: 4px;
            border-bottom-right-radius: 0;
            border-bottom-left-radius: 0;
            padding: .5em .5em 0;

        }

        .filter-holders {
            border-top-right-radius: 0;
            border-top-left-radius: 0;
            border-top: none;
       }

        summary {
            font-weight: bold;
            margin: -.5em -.5em 0;
            padding: .5em;
            cursor: pointer;
        }

        details[open] {
            padding: .5em;
        }

        details[open] summary {
            border-bottom: 1px solid #aaa;
            margin-bottom: .5em;
        }        


        #cropper-container{
            margin-top: 2em;
        }
        #cropper-container img {
          display: block;

          /* This rule is very important, please don't ignore this */
          max-width: 100%;                    
        }



        .list-holder{
            max-height: 50px;
            width: 100%;
            background: whitesmoke;
            border-top-left-radius: 2em;
            border-bottom-left-radius: 2em;
            margin-bottom: 2px;
            display: flex;
              justify-content: center;
              align-items: center;
            cursor: pointer;

        }

        .list-holder:hover{
            background: #ffdf002b;
        }


        .list-holder:hover .initals{
            color: #fcffdd;
        }


        .list-holder img{
            border-radius: 1.5em;
                height: 50px;            
        }
        .list-holder-image-holder{
            flex: 1;
        }
        .list-holder-name-holder{
            flex: 5;
            overflow: hidden;
        }

        .list-holder-name-holder span{
            font-size: 2em;
            white-space: nowrap;
        }

        .initals{
            text-align: center;
            font-size: 2em;
            background: lightgray;
            border-radius: 2em;
            height: 50px;
            min-width: 50px;
            display: inline-block;
            color: white;
        }    
}

    </style>



</head>
<body class="">



    <script>

    </script>



    <% if (wbVerified || wbDontUse) { %>


        <div id="app">


            <header>
              
            </header>
            <main>
              <nav>

                <details>
                    <summary>Facets (click to expand):</summary>
                    <div >
                        <div>
                            <input @change="filterChange" type="checkbox" v-model="filterDoesNotHaveImage" name="filterDoesNotHaveImage" id="filterDoesNotHaveImage" class="">
                            <label class="form-check-label" for="filterDoesNotHaveImage">Does NOT have image yet</label>
                        </div>
                        <hr>
                        <span style="float:right"><a href="#" v-on:click.prevent.stop="activeProjects=[]">Unselect All</a></span>
                        <p>Projects:</p>
                        <div v-for="(c,idx) in projects">                            
                            <input @change="filterChange" type="checkbox" :value="c.id" v-model="activeProjects" :name="'project_check_box_' + idx" :id="'project_check_box_' + idx" class="">
                            <label class="form-check-label" :for="'project_check_box_' + idx">{{c.label}}</label>
                        </div>

                        <hr>
                        <p>Classes:</p>
                        <div v-for="(c,idx) in classes">                            
                            <input @change="filterChange" type="checkbox" :value="c.id" v-model="activeClasses" :name="'check_box_' + idx" :id="'check_box_' + idx" class="">
                            <label class="form-check-label" :for="'check_box_' + idx">{{c.label}}</label>
                        </div>

                    </div>
                </details>
                <div class="filter-holders" style="margin-bottom: 1em;">
                      <input class="input" style="border: none; box-shadow: none;" type="text" @keyup="filterTextChangeDom($event)" placeholder="Filter...">

                </div>  



                <template v-if="!filtering">

                    <div class="list-holder" @click="loadItem(item.qid)" v-for="(item,idx) in filteredItems" :key="'item_'+idx+'_'+keyCounter">

                        <div class="list-holder-image-holder">
                            <template v-if="imageLookup[item.qid]">
                                <img :src="item.image" :key="'item_image_'+idx+'_'+keyCounter">
                            </template> 
                            <template v-else>
                                <span class="initals">{{returnInitals(item.label)}}</span>
                            </template>


                        </div>
                        <div class="list-holder-name-holder">
                            
                            <span>{{item.label}}</span>

                        </div>

                        

                    </div>
                    <div style="font-style:oblique;">Only showing the first 300 results</div>

                </template>

                <template v-else>

                    <div style="padding: 1em; font-weight: bold; font-size: 3em;">Processing, please wait...</div>
                </template>                


              </nav>
              <article style="position: relative;">
                    <div style="position: absolute; left: 1%; font-size: 2em;">
                        
                        <template v-if="activeQid != null">
                            <span>
                                {{activeQid.label}},
                            </span>
                            <span style="text-transform: capitalize;">
                                {{activeQid.typeLabel}}
                            </span>
                            <a target="_blank" :href="'http://base.semlab.io/wiki/Item:'+activeQid.qid">{{activeQid.qid}}</a>
                        </template>


                    </div>
                <div class="tabs is-right is-boxed">
                  <ul>
                    <li :class="{'is-active': (mainDisplay==='crop') }">
                      <a @click="mainDisplay='crop'">
                        <span class="is-small"></span>
                        <span>Crop Image</span>
                      </a>
                    </li>
                    <li :class="{'is-active': (mainDisplay==='host') }">
                      <a @click="mainDisplay='host'">
                        <span class="is-small"></span>
                        <span>Host Image</span>
                      </a>
                    </li>
                    
                  </ul>
                </div>








                <template v-if="mainDisplay=='crop'">
                    

                    <div v-if="activeQid != null">

                        <div style="display:flex">
                            <div style="flex:1"><input class="input" ref="cropfrom" v-model="urlToUse" placeholder="enter url to image here" type="text"></div>
                            <div style="flex:0"><button @click="startCrop" class="button">Load</button></div>
                            
                        </div>
                        
                        <div v-if="cropMade!=true">
                                

                            
                            <div ref="saveCropButton" style="display:none; margin-top:1em; margin-bottom: 1em; min-height: 1em;">
                                <button @click="sendCrop" style="float:right;"  class="button is-primary">Generate Crop</button>    
                            </div>
                            
                            <div id="cropper-container">
                                
                            </div>


                        </div>
                        <div v-else>
                            
                            <div style="margin-top: 2em;" v-if="alreadyHasImageWarning" class="notification is-danger is-light">
                                Looks like this item already has an image.<br>
                                If you are meaning to replace the existing image make sure to <a target="_blank" :href="'http://base.semlab.io/wiki/Item:'+activeQid.qid">go to the item page</a> and remove the unwanted image.<br>
                                This tool does not remove or replace existing claims.<br>

                            </div>


                            <div style="margin-top: 2em;" v-if="cropResults" class="notification is-success is-light">
                               {{cropResults}}

                            </div>

                            


                            <div style="display: flex;margin-top: 2em;">
                                <div style="flex:1">Image (P3):</div>
                                <div style="flex:10">
                                    <img id="crop-preview" src="">      
                                </div>
                            </div>



                            <div style="display: flex;">
                                <div style="flex:1">Title (P82):</div>
                                <div style="flex:10">
                                    <textarea class="textarea" v-model="P82" placeholder="Enter the title of this image, source, citations, info, etc." rows="10"></textarea>    
                                </div>
                            </div>
                            <div style="display: flex;">
                                <div style="flex:1">Ref URL (P114):</div>
                                <div style="flex:10">
                                    <input class="input" v-model="urlToUse" type="text">
                                    <div v-if="urlToUse.includes('semlab.s3.amazonaws.com/images/hosted/')" style="font-style:bold; color:red">
                                        🙅Make sure we have the rights to display the full higher resolution hosted image, if not remove the URL from the field.🙅  
                                    </div>
                                </div>
                            </div>

                            <button @click="sendIt" class="button">Upload and Create Claims</button>


                        </div>
                    </div>

                </template>
                <template v-else>

                    <template v-if="activeQid != null">

                        <p>
                            If the image you want to use as a crop is not online any where you can host it here.<br>
                            Only upload Jpeg files (.jpg) otherwise the cropping process may not work.<br><br>

                        </p>

                        <form ref='uploadForm' 
                                    id='uploadForm' 
                                    :action='"/upload?qid="+activeQid.qid' 
                                    method='post' 
                                    encType="multipart/form-data">


                            <div class="file has-name is-boxed" id="file-js">
                                
                              <label class="file-label">
                                <input class="file-input" ref="fileupload" type="file" name="resume">

                                <span class="file-cta">
                                  <span class="file-icon">
                                    <i class="fas fa-upload"></i>
                                  </span>
                                  <span class="file-label">
                                    Choose a file…
                                  </span>
                                </span>
                                <span ref="fileuploadname" class="file-name">
                                  
                                </span>
                              </label>
                            </div>

                            <button class="button" action="submit">Upload</button>

                        </form>



                        <h3 style="margin-top:3em">Recently Uploaded URLs:</h3>
                        <ol>
                            <li v-for="v of hostedList" :key="v.ETag">
                                {{'https://semlab.s3.amazonaws.com/' + v.Key}}                            
                            </li>

                        </ol>

                    </template>
                </template>







              </article>
            </main>



    	

         </div>

    <% }else{ %>


        <p>Please log in, redirecting to login...</p>
        <script type="text/javascript">window.location="/"</script>


    <% } %> 

<script >





	var app = new Vue({
	  el: '#app',
	  data: {
	       
           activeClasses:['Q1'],
           classes: [],
           projects: [],
           activeProjects: [],
           filterDoesNotHaveImage: true,
           mainDisplay: 'crop',
           hostedList: [],
           urlToUse: null,
           allItems: [],
           filteredItems: [],
           filterText: null,
           filtering: true,
           imageLookup: {},
           activeQid: null,
           cropMade: false,
           keyCounter: 0,

           P82: null,
           cropResults: false,
           alreadyHasImageWarning: false,


	  },

      watch: {
        mainDisplay: function(){


          if (this.mainDisplay==='host'){

            this.refreshHostedList();



            this.$nextTick(()=>{

                  // const fileInput = document.querySelector('#file-js input[type=file]');
                  // console.log(fileInput)
                  // fileInput.onchange = () => {
                  //   if (fileInput.files.length > 0) {
                  //     const fileName = document.querySelector('#file-js .file-name');
                  //     fileName.textContent = fileInput.files[0].name;
                  //   }
                  // }
            })
          }

        },

        activeProjects: function(){

            this.filterChange()
        },
        activeClasses: function(){
            this.filterChange()

        },
        filterDoesNotHaveImage: function(){
            this.filterChange()

        },



      },



      components: {
        

      },
      computed: {
         


      },


	  created: function(){


            fetch(`/clist`)
              .then(response => response.json())
              .then(data => {       

                this.classes = data
                

                fetch(`/projects`)
                  .then(response => response.json())
                  .then(data => {       

                    this.projects = data
                    // make the all active to start

                    this.activeProjects = data.map((p)=>{ return p.id})




                  });   




              });   





              if (window.location.href.includes('?uploaded')){

                    this.refreshHostedList()
                    let waitForListLoad = window.setInterval(()=>{

                        if (this.filteredItems.length>0 && this.hostedList.length>0){
                        window.clearInterval(waitForListLoad)  
                          console.log(window.location.hash)
                          this.loadItem(window.location.hash.replace('#',''))        
                             
                          this.mainDisplay = 'crop'       

                            this.$nextTick(()=>{
                                console.log(this.hostedList[0])
                                this.urlToUse = 'https://semlab.s3.amazonaws.com/' + this.hostedList[0].Key
                                // this.$refs.cropfrom.value= this.urlToUse
                                
                                this.startCrop() 
                            });

                          

                        }


                    },500)

                



              }



	  },




  methods: {


        sendIt: function(qid){



            console.log(this.activeQid, this.P82, this.urlToUse)


            var xhr = new XMLHttpRequest();
            xhr.open("POST", `/savecrop`, true);
            xhr.setRequestHeader('Content-Type', 'application/json');
            xhr.onload = (response) => {
                
                const data = xhr.responseText;

          
                



                this.cropResults = data
                if (data.includes('Uploaded Image')){

                    // loop through and update the image for this one
                    for (let i in this.filteredItems){

                        if (this.filteredItems[i].qid == this.activeQid.qid){

                            this.filteredItems[i].image = `https://semlab.s3.amazonaws.com/images/${this.activeQid.qid}.jpg`
                            this.keyCounter++
                            this.activeQid.image = this.filteredItems[i].image

                            this.imageLookup[this.activeQid.qid] = this.filteredItems[i].image
                        }                 
                    }


                    for (let item of this.allItems){
                        if (item.item.value.split('/').splice(-1)[0] == this.activeQid.qid){
                            item.image = {value: this.activeQid.image}
                            console.log("SET allItems:",item)
                            this.keyCounter++
                        }
                    }

                }
                

            }


            xhr.send(JSON.stringify({
                item: this.activeQid,
                P82: this.P82,
                P114: this.urlToUse
            }));  






        },


        loadItem: function(qid){

            this.cropResults=false
            this.P82 = null
            this.cropMade = false
            this.alreadyHasImageWarning =false
            this.activeQid = this.filteredItems.filter((f) => { return (qid === f.qid)})[0]

        },


        filterTextChangeDom : function(event){


            if (window.filterTimeout){
                window.clearTimeout(window.filterTimeout)   
                console.log('clearing old timeout')             
            }
            window.filterTimeout = window.setTimeout(()=>{
                console.log(event.target.value)

                if (event.target.value && event.target.value.trim() != ''){
                    this.filterText = event.target.value  
                }else{
                    this.filterText = null
                }
                this.filter()
                


            },250)



        },



        sendCrop: function(){

            let that = this

            window.cropper.getCroppedCanvas().toBlob((blob) => {



                var reader = new FileReader();

                reader.readAsDataURL(blob); 
                reader.onloadend = function() {
                    var base64data = reader.result;                
                    base64data = base64data.substr(base64data.indexOf(',')+1)
                    
                    var xhr = new XMLHttpRequest();
                    xhr.open("POST", `/makecrop`, true);
                    xhr.setRequestHeader('Content-Type', 'application/json');
                    xhr.onload = () => {
                        
                        window.cropper.destroy()  

                        window.setTimeout(()=>{

                            document.getElementById('cropper-container').innerHTML = ''


                                            
                            console.log("did it")
                            that.cropMade = true

                            that.$nextTick(()=>{
                                console.log(document.getElementById('crop-preview'))
                                document.getElementById('crop-preview').setAttribute('src','/getcrop?'+Date.now())

                            });
                            

                            

                            fetch(`https://base.semlab.io/api.php?action=wbgetclaims&entity=${that.activeQid.qid}&property=P3&format=json&origin=*`)
                            .then(response => response.json())
                            .then((data) => {

                            if (data && data.claims && data.claims.P3){
                                that.alreadyHasImageWarning=true
                            }



                            });



                        }, 1000);
                       


                        // that.$nextTick(()=>{
                        //     document.getElementById('P114').value = that.urlToUse 
                        // });
                    }


                    xhr.send(JSON.stringify({
                        crop: base64data  
                    }));  
                    

                }



                // const formData = new FormData();

                // Pass the image file name as the third parameter if necessary.
                // formData.append('croppedImage', blob/*, 'example.png' */);

                // // Use `jQuery.ajax` method for example
                // $.ajax('/path/to/upload', {
                //   method: 'POST',
                //   data: formData,
                //   processData: false,
                //   contentType: false,
                //   success() {
                //     console.log('Upload success');
                //   },
                //   error() {
                //     console.log('Upload error');
                //   },
                // });

 


                // var oReq = new XMLHttpRequest();
                // oReq.open("POST", `/makecrop`, true);
                // oReq.onload = function (oEvent) {
                //   // Uploaded.
                //   console.log('done')
                // };

                // oReq.send(blob);








            }, 'image/jpeg' );



            // let crop = window.cropper.getCropBoxData()













        },

        startCrop: function(){

            if (this.urlToUse.trim()=='' || !this.urlToUse.includes('http') ){
                alert('enter valid url')
                return
            }
            this.cropMade=false

            this.$nextTick(()=>{

                this.$refs.saveCropButton.style.display='none'

                document.getElementById('cropper-container').innerHTML = "Loading image..."

                var xhr = new XMLHttpRequest();
                xhr.open("POST", `/startcrop`, true);
                xhr.setRequestHeader('Content-Type', 'application/json');
                xhr.onload = () => {
                    


                    this.$refs.saveCropButton.style.display='block'
                    window.setTimeout(()=>{
                        document.getElementById('cropper-container').innerHTML = ""


                        let img = document.createElement('img')
                        img.setAttribute('src','/getcrop?'+Date.now())
                        img.setAttribute('id','image-crop')
                        document.getElementById('cropper-container').appendChild(img)

                        const image = document.getElementById('image-crop');
                        const cropper = new Cropper(image, {
                          aspectRatio: 1 / 1,
                          crop(event) {
                            console.log(event.detail.x);
                            console.log(event.detail.y);
                            console.log(event.detail.width);
                            console.log(event.detail.height);
                            console.log(event.detail.rotate);
                            console.log(event.detail.scaleX);
                            console.log(event.detail.scaleY);
                          },
                        });


                        window.cropper = cropper



                    },500)




                }

                
                xhr.send(JSON.stringify({
                    url: this.urlToUse 
                }));   


            })

        },


        refreshHostedList: async function(){

            const response = await fetch('/hostedlist/');
            this.hostedList = await response.json();            


        },


        filterChange: async function(){


            this.filtering=true

            let clases = this.activeClasses.map((c)=>{ return `(wd:${c})`}).join(' ')
            let projects = this.activeProjects.map((c)=>{ return `(wd:${c})`}).join(' ')


            let sparql = `

            SELECT DISTINCT ?item ?itemLabel ?valueType ?image
            WHERE 
            {
              VALUES (?valueType) { ${clases} }
              VALUES (?valueProject) { ${projects}}

              ?item wdt:P1 ?valueType. 
              ?item wdt:P11 ?valueProject.
              
              OPTIONAL{
                ?item wdt:P3 ?image  
              }
                
              SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en". } 
            }`


            let url = 'https://query.semlab.io/proxy/wdqs/bigdata/namespace/wdq/sparql?'
            url = url + new URLSearchParams({
                query: sparql
            })

            let results = fetch(url,{
                headers: {
                    'Accept' : 'application/json',
                    'User-Agent': 'image cropper - Semlab'                
                }
            })
                  .then(response => response.json())
                  .then((data) => {

                    this.allItems = data.results.bindings

                    this.filter()


                  })





            

        },

        returnInitals: function(fullName){

          const allNames = fullName.trim().split(' ');
          const initials = allNames.reduce((acc, curr, index) => {
            if(index === 0 || index === allNames.length - 1){
              acc = `${acc}${curr.charAt(0).toUpperCase()}`;
            }
            return acc;
          }, '');
          return initials;



        },

        filter: function(){

            this.filtering=true
            this.filteredItems = []

            let results = []

            for (let item of this.allItems){

                let i = {

                    'image' : (item.image) ? item.image.value : null,
                    'qid' : (item.item) ? item.item.value.split('/').splice(-1)[0] : null,
                    'label' : (item.itemLabel) ? item.itemLabel.value : null,
                    'type' : (item.valueType) ? item.valueType.value.split('/').splice(-1)[0] : null,


                }


                i['typeLabel'] = this.classes.filter((c) => (i.type === c.id))[0].label




                this.imageLookup[i.qid] = i.image

                if (this.filterText){
                    
                    if (!i.label.toLocaleLowerCase().includes(this.filterText.toLocaleLowerCase())){
                        continue
                    }
                }else{

                    // if we only care about ones with no image yet then dont do anything with the ones with image
                    if (this.filterDoesNotHaveImage == true && i.image){
                        continue

                    }
                }


                
                if (results.length>300){
                    break
                }

                results.push(i)

                console.log(i)





            }


            this.filteredItems = results
            console.log(this.filteredItems)
            this.filtering=false

        }


















	  }
	})


</script>

</body>




</html>